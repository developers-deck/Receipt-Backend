import { OnModuleInit, OnModuleDestroy } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { FileUploadService } from '../file-upload/file-upload.service';
import { PdfGeneratorService } from './pdf-generator.service';
import { ScraperService } from './scraper.service';
import { PdfQueueService } from './pdf-queue.service';
import { drizzle } from 'drizzle-orm/node-postgres';
import * as schema from '../db/schema';
type DbType = ReturnType<typeof drizzle<typeof schema>>;
export declare class ReceiptsService implements OnModuleInit, OnModuleDestroy {
    private db;
    private configService;
    private fileUploadService;
    private readonly pdfGenerator;
    private readonly scraper;
    private readonly pdfQueue;
    private browser;
    private browserInitLock;
    constructor(db: DbType, configService: ConfigService, fileUploadService: FileUploadService, pdfGenerator: PdfGeneratorService, scraper: ScraperService, pdfQueue: PdfQueueService);
    onModuleInit(): Promise<void>;
    private initializeBrowser;
    onModuleDestroy(): Promise<void>;
    getReceiptsByUserId(userId: string): Promise<{
        items: any;
        id: number;
        createdAt: Date | null;
        userId: string;
        companyName: string | null;
        poBox: string | null;
        mobile: string | null;
        tin: string | null;
        vrn: string | null;
        serialNo: string | null;
        uin: string | null;
        taxOffice: string | null;
        customerName: string | null;
        customerIdType: string | null;
        customerId: string | null;
        customerMobile: string | null;
        receiptNo: string | null;
        zNumber: string | null;
        receiptDate: string | null;
        receiptTime: string | null;
        totalExclTax: string | null;
        totalTax: string | null;
        totalInclTax: string | null;
        verificationCode: string;
        verificationCodeUrl: string | null;
        receiptDataHash: string;
        pdfUrl: string | null;
        pdfStatus: string | null;
    }[]>;
    getAllReceipts(): Promise<{
        items: any;
        id: number;
        createdAt: Date | null;
        userId: string;
        companyName: string | null;
        poBox: string | null;
        mobile: string | null;
        tin: string | null;
        vrn: string | null;
        serialNo: string | null;
        uin: string | null;
        taxOffice: string | null;
        customerName: string | null;
        customerIdType: string | null;
        customerId: string | null;
        customerMobile: string | null;
        receiptNo: string | null;
        zNumber: string | null;
        receiptDate: string | null;
        receiptTime: string | null;
        totalExclTax: string | null;
        totalTax: string | null;
        totalInclTax: string | null;
        verificationCode: string;
        verificationCodeUrl: string | null;
        receiptDataHash: string;
        pdfUrl: string | null;
        pdfStatus: string | null;
    }[]>;
    getReceipt(verificationCode: string, receiptTime: string, userId: string): Promise<any>;
    getReceiptById(id: string): Promise<{
        items: {
            id: number;
            createdAt: Date | null;
            receiptId: number;
            description: string | null;
            quantity: string | null;
            amount: string | null;
        }[];
        id: number;
        createdAt: Date | null;
        userId: string;
        companyName: string | null;
        poBox: string | null;
        mobile: string | null;
        tin: string | null;
        vrn: string | null;
        serialNo: string | null;
        uin: string | null;
        taxOffice: string | null;
        customerName: string | null;
        customerIdType: string | null;
        customerId: string | null;
        customerMobile: string | null;
        receiptNo: string | null;
        zNumber: string | null;
        receiptDate: string | null;
        receiptTime: string | null;
        totalExclTax: string | null;
        totalTax: string | null;
        totalInclTax: string | null;
        verificationCode: string;
        verificationCodeUrl: string | null;
        receiptDataHash: string;
        pdfUrl: string | null;
        pdfStatus: string | null;
    } | null>;
    generateReceiptPdf(receiptData: any): Promise<Buffer>;
    getReceiptsByCompanyName(companyName: string): Promise<{
        items: any;
        id: number;
        createdAt: Date | null;
        userId: string;
        companyName: string | null;
        poBox: string | null;
        mobile: string | null;
        tin: string | null;
        vrn: string | null;
        serialNo: string | null;
        uin: string | null;
        taxOffice: string | null;
        customerName: string | null;
        customerIdType: string | null;
        customerId: string | null;
        customerMobile: string | null;
        receiptNo: string | null;
        zNumber: string | null;
        receiptDate: string | null;
        receiptTime: string | null;
        totalExclTax: string | null;
        totalTax: string | null;
        totalInclTax: string | null;
        verificationCode: string;
        verificationCodeUrl: string | null;
        receiptDataHash: string;
        pdfUrl: string | null;
        pdfStatus: string | null;
    }[]>;
    deleteReceipt(receiptId: number, user: {
        userId: string;
        role: string;
    }): Promise<void>;
}
export {};
